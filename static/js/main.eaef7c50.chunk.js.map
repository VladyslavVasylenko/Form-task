{"version":3,"sources":["TextField.js","App.js","index.js"],"names":["TextField","label","props","useField","field","meta","className","htmlFor","name","touched","error","autoComplete","component","App","validate","Yup","oldPassword","min","required","newPassword","confirmPassword","oneOf","background","w","h","alignItems","justifyContent","direction","p","mt","mb","textTransform","initialValues","validationSchema","onSubmit","values","console","log","alert","formik","type","m","colorScheme","disabled","isValid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAGaA,EAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUC,EAAY,iBAChD,EAAsBC,YAASD,GAA/B,mBAAOE,EAAP,KAAcC,EAAd,KACA,OACE,sBAAKC,UAAU,OAAf,UACE,uBAAOC,QAASH,EAAMI,KAAtB,SAA6BP,IAC7B,2DACEK,UAAS,mCAA8BD,EAAKI,SAAWJ,EAAKK,OAAS,eACjEN,GAAWF,GAFjB,IAGES,aAAa,SAEf,cAAC,IAAD,CAAcC,UAAU,MAAMJ,KAAMJ,EAAMI,KAAMF,UAAU,c,QC0EjDO,MAjFf,WACE,IAAMC,EAAWC,IAAW,CAC1BC,YAAaD,MACVE,IAAI,EAAG,uCACPC,SAAS,wBACZC,YAAaJ,MACVE,IAAI,EAAG,uCACPC,SAAS,wBACZE,gBAAiBL,MACdM,MAAM,CAACN,IAAQ,eAAgB,MAAO,sDACtCG,SAAS,kCAEd,OACE,cAAC,IAAD,CAAQI,WAAW,QAAQC,EAAE,OAAOC,EAAE,QAAtC,SACE,cAAC,IAAD,CAAOC,WAAW,SAASC,eAAe,SAA1C,SACE,eAAC,IAAD,CAAMC,UAAU,SAASL,WAAW,WAAWC,EAAE,OAAOC,EAAE,OAAOI,EAAG,IAAKC,GAAI,GAA7E,UACE,cAAC,IAAD,CACEC,GAAI,GACJC,cAAc,YAFhB,sCAMA,cAAC,IAAD,CACEC,cAAe,CACbhB,YAAY,GACZG,YAAa,GACbC,gBAAiB,IAEnBa,iBAAkBnB,EAClBoB,SAAU,SAAAC,GACRC,QAAQC,IAAIF,GACZG,MAAM,8BATV,SAYG,SAAAC,GAAM,OACL,eAAC,IAAD,CAAMjC,UAAU,OAAhB,UACI,cAAC,EAAD,CACEA,UAAU,YACVL,MAAM,eACNO,KAAK,cACLgC,KAAK,WACLtB,UAAQ,IAGV,cAAC,EAAD,CACEZ,UAAU,YACVL,MAAM,eACNO,KAAK,cACLgC,KAAK,WACLtB,UAAQ,IAGV,cAAC,EAAD,CACEZ,UAAU,YACVL,MAAM,mBACNO,KAAK,kBACLgC,KAAK,WACLtB,UAAQ,IAGV,cAAC,IAAD,CACEK,EAAE,QACFkB,EAAE,OACFZ,GAAG,IACHD,EAAE,IACFc,YAAY,OACZF,KAAK,SACLG,UAAWJ,EAAOK,QAClBb,cAAc,YARhB,wC,OC5DlBc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.eaef7c50.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ErrorMessage, useField } from 'formik';\r\n\r\nexport const TextField = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <div className=\"mb-2\">\r\n      <label htmlFor={field.name}>{label}</label>\r\n      <input\r\n        className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid'}`}\r\n        {...field} {...props}\r\n        autoComplete=\"off\"\r\n      />\r\n      <ErrorMessage component=\"div\" name={field.name} className=\"error\" />\r\n    </div>\r\n  )\r\n}","import React, { isValidElement } from 'react';\nimport { Flex, VStack, Heading, Button} from \"@chakra-ui/react\";\nimport { Formik, Form } from 'formik';\nimport { TextField } from './TextField';\nimport * as Yup from 'yup';\n\nfunction App() {\n  const validate = Yup.object({\n    oldPassword: Yup.string()\n      .min(6, 'Password must be at least 6 symbols')\n      .required('Password is required'),\n    newPassword: Yup.string()\n      .min(6, 'Password must be at least 6 symbols')\n      .required('Password is required'),\n    confirmPassword: Yup.string()\n      .oneOf([Yup.ref('newPassword'), null], 'Password must match or password is does`n required')\n      .required('Confirm password is required'),\n  });\n  return (\n    <VStack background=\"black\" w=\"100%\" h=\"100vh\">\n      <Flex  alignItems=\"center\" justifyContent=\"center\">\n        <Flex direction=\"column\" background=\"gray.100\" w=\"100%\" h=\"100%\" p={120} mt={59}>\n          <Heading \n            mb={10}\n            textTransform=\"uppercase\"\n          >\n            Create your new password\n          </Heading>\n          <Formik\n            initialValues={{\n              oldPassword:'',\n              newPassword: '',\n              confirmPassword: ''\n            }}\n            validationSchema={validate}\n            onSubmit={values => {\n              console.log(values );\n              alert(\"You change your password!\")\n            }}\n          >\n            {formik => (\n              <Form className=\"form\">\n                  <TextField \n                    className=\"textField\"\n                    label=\"Old password\"\n                    name=\"oldPassword\" \n                    type=\"password\" \n                    required\n                  />\n\n                  <TextField \n                    className=\"textField\"\n                    label=\"New password\"\n                    name=\"newPassword\" \n                    type=\"password\" \n                    required\n                  />\n\n                  <TextField \n                    className=\"textField\"\n                    label=\"Confirm password\"\n                    name=\"confirmPassword\" \n                    type=\"password\" \n                    required\n                  />\n\n                  <Button\n                    w=\"200px\"\n                    m=\"auto\"\n                    mt=\"5\"\n                    p=\"7\"\n                    colorScheme=\"blue\"\n                    type='submit'\n                    disabled={!formik.isValid}\n                    textTransform=\"uppercase\"\n                  >\n                    Save changes\n                  </Button> \n                </Form>\n            )}\n          </Formik>\n        </Flex>\n      </Flex>\n    </VStack>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}